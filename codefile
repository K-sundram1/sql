 CREATE TABLE Worker 
( 
  Worker_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,  
  First_Name CHAR(25),
  Last_Name CHAR(25),
  Salary INT(15),
  Joining_Date DATETIME,
  Department CHAR(25)
);  

Insert INTO Worker 
    (Worker_id, First_Name, Last_Name, Salary, Joining_Date, Department) 
    VALUES
    (001, 'Monika' , 'Arora', 100000, '14-02-20 09:00:00'  , 'HR'),
    (002, 'Niharika' , 'Verma', 80000, '14-06-11 09:00:00' , 'Admin'),
    (003, 'Vishal' , 'Singhal', 300000, '14-02-20 09:00:00' , 'HR'),
    (004, 'Amitabh' , 'Singh', 500000, '14-02-20 09:00:00' , 'Admin'),
    (005, 'Vivek' , 'Bhati', 500000, '14-06-11 09:00:00' , 'Admin'), 
    (006, 'Vipul' , 'Diwan' , 200000 , '14-06-11 09:00:00' , 'Account'),
    (007, 'Satish' , 'Kumar' , 75000, '14-01-20 09:00:00' , 'Account'),
    (008, 'Geetika' , 'Chauhan' , 90000, '14-04-11 09:00:00' , 'Admin'); 
        
SELECT * FROM Worker;

-- References from the Main Table 'Worker'
-- Stores the Amount of Bonus being given to some Worker Corresponding to their 'Worker_id'
CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
    ON DELETE CASCADE
);

INSERT INTO Bonus
       (WORKER_REF_ID , BONUS_AMOUNT , BONUS_DATE)
       VALUES
       (001, 5000, '16-02-20'),
		   (002, 3000, '16-06-11'),
		   (003, 4000, '16-02-20'),
		   (001, 4500, '16-02-20'),
		   (002, 3500, '16-06-11');
		   
SELECT * FROM Bonus;

-- References the Main Table 'Worker'
-- Stores the Title assigned to a worker Corresponding to their 'Worker_id'
CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Title
         (WORKER_REF_ID , WORKER_TITLE , AFFECTED_FROM)
         VALUES
          (001, 'Manager', '2016-02-20 00:00:00'),
          (002, 'Executive', '2016-06-11 00:00:00'),
          (008, 'Executive', '2016-06-11 00:00:00'),
          (005, 'Manager', '2016-06-11 00:00:00'),
          (004, 'Asst. Manager', '2016-06-11 00:00:00'),
          (007, 'Executive', '2016-06-11 00:00:00'),
          (006, 'Lead', '2016-06-11 00:00:00'),
          (003, 'Lead', '2016-06-11 00:00:00');
    
SELECT * FROM Title;




--IF WE WANT TO USE SLECT INSTEAD OF ROM WE USE  TABLES
SELECT 55+121;
--WHERE STATEMENT IS USED FROM CONDITION
SELECT *FROM worker WHERE Salary>100000;
-- between is used for the range

SELECT * FROM worker WHERE salary BETWEEN 100000 AND 500000;
select * from worker
select *from worker where Department='HR' OR  Department='Admin';
-- if we required lot of or opertion then instead of using it we can use IN statement
select *from worker where Department IN('HR','Admin');
select *from worker order by Salary DESC;
select *from worker order by Salary ASC ;
-- WE HAVE AGGERATE THE FUNCTION 
-- GROUP BY

-- BY USING AGGERIGATE FUNCTION'
select *from worker;
select Department from worker group by Department;
select Department, COUNT(Department) from worker group by Department;
select Department,AVG(Salary) from worker group by Department;
select Department,MIN(Salary) from worker group by Department;
select Department,MAX(Salary) from worker group by Department;
-- IF WE WANT TO USE THE HAVING RHEN WE FIRST AGREATE THE
select Department, COUNT(Department) from worker group by Department having COUNT(Department)>3;
-- basic difeerencr etween slect is having is used when we used group by 

-- no we have to learn how to create and delete the table
--make a new table
create table account(
    id int PRIMARY KEY,
    name varchar(255) unique
    
);

-- add the conte
insert into account VALUES(2,"dfhnlsh");
-- insert into account VALUES(6,"dfhnlsh"); THIS WILL GIVE AN ERROR BECAUSE THE NAME IS ALREADY UNIQUE

select *from account;
-- we want to add the row and coloum
alter table account  add salary float NOT NULL DEFAULT 0;
select *from account;
-- if we want to modify the datatype of the coloumn
alter table account modify salary int;
desc account;
-- if we want to rename the name of coloumn then
ALTER TABLE account 
CHANGE COLUMN salary new_income INT;
desc account;
-- if we want to rename the table
alter table account RENAME TO heel;
desc heel;
create table sales(
    id int,
    name varchar(255),
    address varchar(255)

);
insert into sales(id,name,address) VALUES(1,"ram","hell"),(2,"sun","dsds"),(3,"drea","sdnmak");
select * from sales;
-- if we want to update the all the id theen'
UPDATE sales set id=1 ;
-- we want to sepcify the paricular thing
update sales set id=111 WHERE name="ram";

-- delete query
delete from sales WHERE id=111;
select *from sales;
delete from sales;
select *from sales;
select * from ProjectS;
select *from worker;
select *from Title;
-- now how the joints works
SELECT w.*, t.*
FROM Worker AS w
INNER JOIN Title AS t ON w.Worker_id = t.WORKER_REF_ID;

-- query 2: whe have to find the employe which is worker is is from hr deparement and work tittle ix excutive
select w.*,t.* from worker as w INNER JOIN Title as t ON w.Worker_id = t.WORKER_REF_ID WHERE w.Department='HR' AND t.WORKER_TITLE='Manager';
-- there are three type of the set operation 
-- union
create table a(
    a1 int,
    a2 int,
    a3 int

);
-- create a table b
insert into  a(a1,a2,a3) VALUES(1,0,0),(0,1,0),(0,0,1);
select *from a;
create table b(
    b1 int,
    b2 int,
    b3 int

);
insert into  b(b1,b2,b3) VALUES(1,1,0),(0,1,1),(1,0,1);
-- union
select *from a UNION select *from b;
-- intersection


-- -- minus operation means 
select a.* ,b.* from a AS a LEFT JOIN b AS b ON a.a1=b.b1 WHERE b.b2 IS NULL;
-- SUBQUERIES 

SELECT * 
FROM worker 
WHERE Salary IN (SELECT Salary FROM worker WHERE Department = 'HR');
select *from worker where Worker_id IN(select Worker_id from worker  where Last_Name='singh');



select *from worker;

--  Query1
-- Write an SQL query to fetch "FIRST_NAME" from Worker table using the alias name as <WORKER_NAME>.
select First_Name from worker AS WORKER_NAME;
-- Query 2
-- Write an SQL query to fetch "FIRST_NAME" from Worker table in upper case.
select UPPER(First_Name) from worker;
-- LLY TO LOWER CONVERSION
select LOWER(First_Name) from worker;
-- Query 3
-- Write an SQL query to fetch unique values of DEPARTMENT from Worker table.
select DISTINCT(Department) from worker ;
-- Query 4
-- Write an SQL query to print the first three characters of  FIRST_NAME from Worker table.
select SUBSTRING(First_Name,1,3) from worker;
-- if we want upper case then rap it

-- // the last index is 1 and last index is also included

-- Query 5
--  Write an SQL query to find the position of the alphabet ('b') in the first name column 'Amitabh' from Worker table.
select INSTR(First_Name,'b') from worker WHERE First_Name='Amitabh';
-- in  str we take the first parameter as the string and other is char
-- if we want ot find the position of the one sub string to another sub string then we can use the str function
-- Query 6
-- Write an SQL query to print the FIRST_NAME from Worker table after removing white spaces from the right side.

select RTRIM(First_Name) from worker;
-- trim function used to trim the  the string
-- Query 7
-- Write an SQL query to print the DEPARTMENT from Worker table after removing white spaces from the left side.


select LTRIM((Department)) from worker;
-- Query 8
-- Write an SQL query that fetches the unique values of DEPARTMENT from Worker table and prints its length.
select  DISTINCT(LENGTH(Department)) from worker;
-- Query 9
-- Write an SQL query to print the FIRST_NAME from Worker table after replacing 'a' with 'A'.
select REPLACE(First_Name,'a','A') from worker;
-- this the syntaxwe use the replace in which first parameter is string first one is source and the last one is the destrination
-- Query 10
-- Write an SQL query to print the FIRST_NAME and LAST_NAME from Worker table into a single column COMPLETE_NAME.
select CONCAT(First_Name,' ',Last_Name)AS Complete_Name from worker;
-- Query 11
-- Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending.
select * from worker ORDER BY First_Name ASC;

--- Query 12
-- Write an SQL query to print all Worker details from the Worker table order by 
-- FIRST_NAME Ascending and DEPARTMENT Descending.
select * from worker ORDER BY First_Name ASC , Department desc;
-- Query 13
-- Write an SQL query to print details for Workers with the first name as "Vipul" and "Satish" from Worker table.
select * from worker WHERE  First_Name IN('Vipul','Satish');
-- 2nd method
select *from worker WHERE First_Name='Vipul' OR First_Name='Satish';
-- Query 14
-- Write an SQL query to print details of workers excluding first names, "Vipul" and "Satish" from Worker table.
select * from worker WHERE NOT First_Name='Vipul' OR First_Name='Satish';

-- Query 15
-- Write an SQL query to print details of Workers with DEPARTMENT name as "Admin*".
select * from worker WHERE Department='Admin';
-- Query 16
-- Write an SQL query to print details of the Workers whose FIRST_NAME contains 'a'.
select * from worker WHERE First_Name LIKE '%a%';
-- Query 17
-- Write an SQL query to print details of the Workers whose FIRST_NAME ends with 'a'.
select * from worker WHERE First_Name LIKE '%a';
-- first value is like %a represent the value ending and last wala represnt firdst value


-- Query 18
-- Write an SQL query to print details of the Workers whose FIRST_NAME ends with 'h' and contains six alphabets.
select *from worker     WHERE First_Name LIKE '_____h';
-- Query 19
-- Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.
select * from worker WHERE Salary BETWEEN 1000000 AND 500000;
-- Query 20
-- Write an SQL query to print details of the Workers who have joined in Feb'2014.
select * from worker;
select * from worker WHERE YEAR(Joining_Date)=2014 AND MONTH(Joining_Date)=2;
-- Query 21
-- Write an SQL query to fetch the count of employees working in the department 'Admin'.
select COUNT(Department)  from worker GROUP BY Department='Admin';
-- Query 22
-- Write an SQL query to fetch worker full names with salaries >= 50000 and <= 100000.
select CONCAT(First_Name,' ',Last_Name) from worker WHERE Salary>=50000 AND Salary<=100000;

-- Query 23
-- Write an SQL query to fetch the no. of workers for each department in the descending order.
select COUNT(Department) from worker GROUP BY Department order by COUNT(Department) DESC;
--Query 24
-- Write an SQL query to print details of the Workers who are also Managers.
-- hence there are two table then we use jpoin concept
select * from worker;
select * from Title;
SELECT * FROM 
Worker as w INNER JOIN Title as t
ON w.Worker_id = t.WORKER_REF_ID
WHERE t.WORKER_TITLE = 'Manager';
-- Query 25
-- Write an SQL query to fetch number (more than 1) of same titles in the ORG of different types.
select WORKER_TITLE ,COUNT(*) from Title GROUP BY WORKER_TITLE HAVING COUNT(*)>1 ;
-- * REPRESERNT ALL TE VALUE 
-- Query 26 [An IMPORTANT interesting Query]
-- Write an SQL query to show only odd rows from a table
-- WE USE THE MOD
select * from worker;

select * from worker  WHERE MOD(Worker_id,2)!=0;
-- Query 27
-- Write an SQL query to show only even rows from a table.
SELECT * FROM worker WHERE MOD(Worker_id,2)=0;
-- Query 28
-- Write an SQL query to clone a new table from another table.
create table worker_clone LIKE worker;
insert into worker_clone select *from worker;
select * from worker_clone;
---- Query 29
-- Write an SQL query to fetch INTERSECTING records of two tables.
select w.* from worker AS w INNER JOIN worker_clone as w2 using(WORKER_ID);
-- Query 30
-- Write an SQL query to show records from one table that another table does not have
-- that means we have to do minus
SELECT * from 
Worker LEFT JOIN WORKER_CLONE
Using(WORKER_ID)
WHERE WORKER_CLONE.WORKER_ID is NULL;
-- Query 31
-- Write an SQL query to show the current date and time.
select CURDATE();
select NOW();
-- Query 32
-- Write an SQL query to show the top n (say 5) records of a table order by descending salary.
select * from worker ORDER BY Salary desc LIMIT 5 ;
-- Query 33
-- Write an SQL query to determine the nth (say n=5) highest salary from a table.
-- IN THIS TYPE OF QUERY WE CAN DO IT WITH 2 WQAYS
-- METHOD 1
SELECT * FROM worker ORDER BY Salary DESC LIMIT 1;
-- 2nd method is using the technique to elect n-1 ,1
select * from worker ORDER BY Salary DESC LIMIT 1  OFFSET 4;
-- in the offset approach we just give the 1 ,n-1 offset
select *from worker ORDER BY Salary desc limit 1 offset 6;
-- Query 34
-- Write an SQL query to determine the 5th highest salary without using LIMIT keyword.
-- these type of query is selected by using coreelated sub queries
SELECT Salary FROM Worker as w1
where 4  = (
  Select count(distinct(w2.salary))
  FROM Worker as w2
  WHERE w2.salary >= w1.salary
);
-- Query 35
-- Write an SQL query to fetch the list of employees with the same salary.
select * from  worker as w1 ,   worker as w2 where w1.Worker_id!=w2.Worker_id AND w1.Salary=w2.Salary;
-- Query 36
-- Write an SQL query to show the second highest salary from a table using sub-query.
-- select the first highest salry then apply ir
SELECT MAX(Salary) 
FROM worker 
WHERE Salary < (SELECT MAX(Salary) FROM worker);
-- this query can be written as
select MAX(Salary ) from worker where Salary NOT IN(select MAX(Salary) from worker);
-- Query 38
-- Write an SQL query to list worker_id who does not get bonus.
-- that means a worker row and a bonus row we have to select the
select Worker_id from worker where Worker_id NOT IN(select WORKER_REF_ID FROM Bonus);
-- Query 39
-- Write an SQL query to fetch the first 50% records from a table
select * from worker where Worker_id <= (select COUNT(Worker_id)/2 from worker );
-- Query 40
-- Write an SQL query to fetch the departments that have less than 4 people in it.
select Department ,COUNT(Department) from worker group by Department having COUNT(Department)<=4;
-- Query 41
-- Write an SQL query to show all departments along with the number of people in there.
select Department ,COUNT(Department) from worker group by Department ;
-- Query 42 [Interesting]
-- Write an SQL query to show the last record from a table.
-- in these type of query we should no know that woker_id is contiously increasing
select * from worker where Worker_id =( select MAX((Worker_id)) from worker);
-- Query 43
-- Write an SQL query to fetch the first row of a table.
select * from worker where worker_id=(select min(worker_id) from worker);
-- Query 44
-- Write an SQL query to fetch the last five records from a table.
select * from worker ORDER BY Salary DESC LIMIT 5;
-- AFTER THIS STEP THE ORDER IS REVERSED THEN  WE SHOUD HAVE TO MAINTAIN IT BACK
(select * from worker ORDER BY Salary DESC LIMIT 5) ORDER BY worker_id;


-- Query 45
-- Write an SQL query to print the name of employees having the highest salary in each department.
SELECT w.*
FROM(
  SELECT MAX(Salary) as Maxsal, department
  FROM Worker
  GROUP BY Department
) AS temp
Inner Join Worker as w 
ON w.Salary = temp.MaxSal;
-- Write an SQL query to fetch three max salaries from a table using co-related subquery.
SELECT DISTINCT Salary
FROM worker AS w1
WHERE 3 >= (
    SELECT COUNT(DISTINCT Salary)
    FROM worker AS w2
    WHERE w1.Salary <= w2.Salary
);


SELECT DISTINCT (salary)
FROM worker AS w1
WHERE 4 >= (
    SELECT COUNT(DISTINCT (salary))
    FROM worker AS w2
    WHERE w1.salary <= w2.salary
);



